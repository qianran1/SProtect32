请仔耐心细阅读SDK的说明, 这对于你今后保护自己的软件会有极大的帮助. 高级用户请参阅VC++使用说明

注意:
WEB端 网络授权系统, 一共支持40个水印使用, 请妥善安排你的加密方案, 如需更多的加密水印支持请更换 WEB端全功能版本.
WEB端 全功能, 一共支持512个水印使用, 请妥善安排你的加密方案, 如需更多的加密水印支持请更换 PC版.

///// 项目中需引入SProtect水印模块.ec (该模块中包含SProtect常规水印, 高级水印请参考C/C++相关文档)

置入代码 (#SP_代码加密开始)
置入代码 (#SP_代码加密结束)

置入代码 (#SP_防Dump开始)
置入代码 (#SP_防Dump结束)

置入代码 (#SP_代码校验_AUTO)

置入代码 (#SP_反调试_AUTO)





1 请注意, 本SDK仅仅支持32位的PE文件

2 驱动PE文件加密, 仅仅只支持代码加密SDK, 其他SDK均不可在驱动PE文件加密时使用

3 seh相关支持, 高级用户请参阅VC++使用说明
	
4 代码加密水印[#SP_代码加密开始, #SP_代码加密结束]可以包含 防止Dump代码加密水印[#SP_防Dump开始, #SP_防Dump结束], 比如:

.子程序1

置入代码 (#SP_代码加密开始)
	
置入代码 (#SP_防Dump开始)		' 被 #SP_防Dump开始 #SP_防Dump结束 包含的代码会被抽取进行变异膨胀处理(轻微)然后放置在动态内存中执行[支持seh]
信息框(0,"hello, sp1!","",0)
置入代码 (#SP_防Dump结束)
	
置入代码 (#SP_防Dump开始)
信息框(0,"hello, sp2!","",0)
置入代码 (#SP_防Dump结束)
	
置入代码 (#SP_防Dump开始)
信息框(0,"hello, sp3!","",0)
置入代码 (#SP_防Dump结束)
	
置入代码 (#SP_代码加密结束)
	


5 建议每一个代码加密水印[#SP_代码加密开始, #SP_代码加密结束], 都或多或少的包含3 - 4个[#SP_防Dump开始, #SP_防Dump结束]水印, 这样可以更好的保护APP防止被DUMP

6 相反, 防止Dump代码加密水印[#SP_防Dump开始, #SP_防Dump结束] 不能包含 代码加密水印[#SP_代码加密开始, #SP_代码加密结束], 比如:
.版本 2

.子程序1
置入代码 (#SP_防Dump开始)
	
置入代码 (#SP_代码加密开始) 		'不能在 #SP_防Dump开始 中包含 代码加密水印[#SP_防Dump开始, #SP_防Dump结束]
信息框(0,"hello, sp1!","",0)
置入代码 (#SP_代码加密结束)
	
置入代码 (#SP_代码加密开始)
信息框(0,"hello, sp2!","",0)
置入代码 (#SP_代码加密结束)
	
置入代码 (#SP_代码加密开始)
信息框(0,"hello, sp3!","",0)
置入代码 (#SP_代码加密结束)
	
置入代码 (#SP_防Dump结束)
	






7 代码内存效验水印 [#SP_代码校验_AUTO] 是一个发现异常自动结束进程的水印(如果不需要上传被修改的日志, 推举你使用这个水印), 使用方法如下:
.版本 2

.子程序 _按钮1_被单击

置入代码 (#SP_代码校验_AUTO)
信息框 (“测试 代码校验, 如果检测到异常则自动结束进程, 本条消息也不会被弹窗提示”, 0, , )





8 反调试水印 [#SP_反调试_AUTO] 是一个用来检测动态调试的水印, 一旦发现被调试会立即自动结束进程(如果不需要上传被调试的日志, 推举你使用这个水印), 使用方法如下:
.版本 2

.子程序 _按钮1_被单击

置入代码 (#SP_反调试_AUTO)
信息框 (“测试 如果程序被调试, 这个弹窗将不会被执行, 进程将自我关闭!”, 0, , )








9 请多利用 代码加密水印 [#SP_代码加密开始, #SP_代码加密结束] 跟 防止Dump代码加密水印 [#SP_防Dump开始, #SP_防Dump结束] 的组合


10 更多的使用DEMO请关注WEB站内公告



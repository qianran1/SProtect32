请仔耐心细阅读SDK的说明, 这对于你今后保护自己的软件会有极大的帮助. 高级用户请参阅VC++使用说明

注意:
WEB端 网络授权系统, 一共支持40个水印使用, 请妥善安排你的加密方案, 如需更多的加密水印支持请更换 WEB端全功能版本.
WEB端 全功能, 一共支持512个水印使用, 请妥善安排你的加密方案, 如需更多的加密水印支持请更换 PC版.

///// 水印 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
置入代码 ({ 235, 28, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 32, 66, 101, 103, 105, 110, 144, 144, 62, 255, 37, 0, 0, 0, 0, 144 })  ' SP_Begin(0) 'SProtect 代码保护开始
置入代码 ({ 235, 17, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 69, 110, 100, 144, 144 })  ' SP_End 'SProtect 代码保护结束

置入代码 ({ 235, 24, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 32, 67, 111, 100, 101, 67, 82, 67, 144, 144, 144, 144, 184, 0, 0, 0, 0, 137, 69, 252, 144, 144 })  ' SP_CRC (结果保存在[ebp-4])

置入代码 ({ 235, 31, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 32, 67, 111, 100, 101, 67, 82, 67, 65, 117, 116, 111, 144, 144, 144, 144, 144, 144, 144 })  ' SP_CRC_AUTO

置入代码 ({ 235, 24, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 32, 65, 110, 116, 105, 68, 101, 98, 117, 103, 144, 144, 184, 0, 0, 0, 0, 137, 69, 252, 144 })  ' SP_ANTIDEBUG (结果保存在[ebp-4])

置入代码 ({ 235, 36, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 32, 65, 110, 116, 105, 68, 101, 98, 117, 103, 65, 117, 116, 111, 144, 144, 62, 255, 37, 0, 0, 0, 0, 144 })  ' SP_ANTIDEBUG_AUTO

置入代码 ({ 235, 29, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 32, 68, 117, 109, 112, 66, 101, 103, 105, 110, 144, 144, 144, 144, 144, 144, 144 })  ' SP_AntiDumpCodeBegin
置入代码 ({ 235, 26, 83, 121, 115, 86, 77, 80, 114, 111, 116, 101, 99, 116, 68, 117, 109, 112, 69, 110, 100, 144, 144, 144, 144, 144, 144, 144 })  ' SP_AntiDumpCodeEnd


///// 水印 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




1 请注意, 本SDK仅仅支持32位的PE文件

2 驱动PE文件加密, 仅仅只支持代码加密SDK, 其他SDK均不可在驱动PE文件加密时使用

3 seh相关支持, 高级用户请参阅VC++使用说明
	
4 代码加密水印[SP_Begin, SP_End]可以包含 防止Dump代码加密水印[SP_AntiDumpCodeBegin, SP_AntiDumpCodeEnd], 比如:

.子程序1

置入代码(#SP_Begin)
	
置入代码(#SP_AntiDumpCodeBegin)		; 被 SP_AntiDumpCodeBegin SP_AntiDumpCodeEnd 包含的代码会被抽取进行变异膨胀处理(轻微)然后放置在动态内存中执行[支持seh]
信息框(0,"hello, sp1!","",0)
置入代码(#SP_AntiDumpCodeEnd)
	
置入代码(#SP_AntiDumpCodeBegin)
信息框(0,"hello, sp2!","",0)
置入代码(#SP_AntiDumpCodeEnd)
	
置入代码(#SP_AntiDumpCodeBegin)
信息框(0,"hello, sp3!","",0)
置入代码(#SP_AntiDumpCodeEnd)
	
置入代码(#SP_End)
	


5 建议每一个代码加密水印[SP_Begin, SP_End], 都或多或少的包含3 - 4个[SP_AntiDumpCodeBegin, SP_AntiDumpCodeEnd]水印, 这样可以更好的保护你们的APP被DUMP

6 相反, 防止Dump代码加密水印[SP_AntiDumpCodeBegin, SP_AntiDumpCodeEnd] 不能包含 代码加密水印[SP_Begin, SP_End], 比如:
.版本 2

.子程序1
置入代码(#SP_AntiDumpCodeBegin)
	
置入代码(#SP_Begin) 		; 不能在 SP_AntiDumpCodeBegin 中包含 代码加密水印[SP_Begin, SP_End]
信息框(0,"hello, sp1!","",0)
置入代码(#SP_End);
	
置入代码(#SP_Begin)
信息框(0,"hello, sp2!","",0)
置入代码(#SP_End);
	
置入代码(#SP_Begin)
信息框(0,"hello, sp3!","",0)
置入代码(#SP_End);
	
置入代码(#SP_AntiDumpCodeEnd);
	



7 代码内存效验水印[SP_CRC]是一个可以接收返回值的水印, 但是它也有一定的限制, 使用方法如下:
  注* 高级用户请参阅VC++使用说明
.版本 2

.子程序 _按钮1_被单击
.局部变量 iResult, 整数型, , , 用来保存代码校验结果, 对应汇编为[ebp-0x04]

置入代码 (#SP_CRC)  ' 这里是一部分水印, 下条指令将检测结果保存到[ebp-0x04]
置入代码 ({ 137, 69, 252 })  ' mov dword ptr ss:[ebp-0x4], eax
' 该PE经SProtect编译后, 上面的水印将会被替换为代码校验逻辑, 代码校验执行后mov dword ptr ss:[ebp-0x4], eax将结果储存在[ebp-0x04]
' 注* 除非清楚了解代码检测水印使用方式, 否则要保证iResult为第一个局部变量, 置入代码 (#SP_CRC)和置入代码 ({ 137, 69, 252 })位置不能改变
信息框 (“测试 代码校验, iResult:” ＋ 到文本 (iResult), 0, , )



8 代码内存效验水印[SP_CRC_AUTO]是一个发现异常自动结束进程的水印(如果不需要上传被修改的日志, 推举你使用这个水印), 使用方法如下:
.版本 2

.子程序 _按钮1_被单击

置入代码 (#SP_CRC_AUTO)
信息框 (“测试 代码校验, 如果检测到异常则自动结束进程”, 0, , )



9 反调试水印[SP_ANTIDEBUG]是一个用来检测动态调试的水印, 一旦发现被调试会返回一个非0值, 使用方法如下:
.版本 2

.子程序 _按钮1_被单击
.局部变量 iResult, 整数型, , , 用来保存调试器检测结果, 对应汇编为[ebp-0x04]

置入代码 (#SP_ANTIDEBUG)  ' 这里是一部分水印, 下条指令将检测结果保存到[ebp-0x04]
置入代码 ({ 137, 69, 252 })  ' mov dword ptr ss:[ebp-0x4], eax
' 该PE经SProtect编译后, 上面的水印将会被替换为调试器检测逻辑, 检测逻辑代码执行后mov dword ptr ss:[ebp-0x4], eax将结果储存在[ebp-0x04]
' 注* 除非清楚了解反调试水印使用方式, 否则要保证iResult为第一个局部变量, 置入代码 (#SP_CRC)和置入代码 ({ 137, 69, 252 })位置不能改变
.如果 (iResult ＝ 0)
    信息框 (“进程没有被调试!”, 0, , )
.否则
    信息框 (“进程被调试!”, 0, , )







10 反调试水印[SP_ANTIDEBUG_AUTO]是一个用来检测动态调试的水印, 一旦发现被调试会立即自动结束进程(如果不需要上传被调试的日志, 推举你使用这个水印), 使用方法如下:
.版本 2

.子程序 _按钮1_被单击

置入代码 (#SP_ANTIDEBUG_AUTO)
信息框 (“测试 如果程序被调试, 这个弹窗将不会被执行, 进程将自我关闭!”, 0, , )








11 请多利用 代码加密水印[SP_Begin, SP_End] 跟 防止Dump代码加密水印[SP_AntiDumpCodeBegin, SP_AntiDumpCodeEnd] 的组合

12 请注意, MAP文件操作不支持 防止Dump代码加密

13 请注意, 在同一个pe文件里面, 你不能 SP_ANTIDEBUG 跟 SP_ANTIDEBUG_AUTO 同时使用, 你只能选择其中一种方案, 否则会出现问题. (SP_CRC 跟 SP_CRC_AUTO 也使用相同的规则)

14 更多的使用DEMO请关注WEB站内公告


